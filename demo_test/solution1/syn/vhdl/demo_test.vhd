-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity demo_test is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    idataInCtrl_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    idataInCtrl_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    idataInCtrl_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    idataInCtrl_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    fdataInCtrl_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fdataInCtrl_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    fdataInCtrl_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    fdataInCtrl_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    idataOutCtrl_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    idataOutCtrl_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    idataOutCtrl_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    idataOutCtrl_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fdataOutCtrl_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fdataOutCtrl_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fdataOutCtrl_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fdataOutCtrl_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of demo_test is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "demo_test,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z030ffg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.588000,HLS_SYN_LAT=21,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=529,HLS_SYN_LUT=507,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_40200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000001000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_fu_212_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_262 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_4_fu_218_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_reg_267 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_222_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_186 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_1_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal idataOutCtrl_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal grp_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal fdataOutCtrl_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal idataOutCtrl_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fdataOutCtrl_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal idataOutCtrl_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fdataOutCtrl_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal idataOutCtrl_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fdataOutCtrl_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_3_fu_222_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_236_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component demo_test_fadd_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component demo_test_mux_42_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    demo_test_fadd_32bkb_U1 : component demo_test_fadd_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_272,
        din1 => ap_const_lv32_40200000,
        ce => ap_const_logic_1,
        dout => grp_fu_197_p2);

    demo_test_mux_42_cud_U2 : component demo_test_mux_42_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => fdataInCtrl_0,
        din1 => fdataInCtrl_1,
        din2 => fdataInCtrl_2,
        din3 => fdataInCtrl_3,
        din4 => tmp_3_fu_222_p5,
        dout => tmp_3_fu_222_p6);

    demo_test_mux_42_cud_U3 : component demo_test_mux_42_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => idataInCtrl_0,
        din1 => idataInCtrl_1,
        din2 => idataInCtrl_2,
        din3 => idataInCtrl_3,
        din4 => tmp_4_reg_267,
        dout => tmp_fu_236_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    fdataOutCtrl_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                fdataOutCtrl_0_preg <= ap_const_lv32_0;
            else
                if (((tmp_4_reg_267 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    fdataOutCtrl_0_preg <= grp_fu_197_p2;
                end if; 
            end if;
        end if;
    end process;


    fdataOutCtrl_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                fdataOutCtrl_1_preg <= ap_const_lv32_0;
            else
                if (((tmp_4_reg_267 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    fdataOutCtrl_1_preg <= grp_fu_197_p2;
                end if; 
            end if;
        end if;
    end process;


    fdataOutCtrl_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                fdataOutCtrl_2_preg <= ap_const_lv32_0;
            else
                if (((tmp_4_reg_267 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    fdataOutCtrl_2_preg <= grp_fu_197_p2;
                end if; 
            end if;
        end if;
    end process;


    fdataOutCtrl_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                fdataOutCtrl_3_preg <= ap_const_lv32_0;
            else
                if (((tmp_4_reg_267 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    fdataOutCtrl_3_preg <= grp_fu_197_p2;
                end if; 
            end if;
        end if;
    end process;


    idataOutCtrl_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                idataOutCtrl_0_preg <= ap_const_lv32_0;
            else
                if (((tmp_4_reg_267 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    idataOutCtrl_0_preg <= tmp_1_fu_249_p2;
                end if; 
            end if;
        end if;
    end process;


    idataOutCtrl_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                idataOutCtrl_1_preg <= ap_const_lv32_0;
            else
                if (((tmp_4_reg_267 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    idataOutCtrl_1_preg <= tmp_1_fu_249_p2;
                end if; 
            end if;
        end if;
    end process;


    idataOutCtrl_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                idataOutCtrl_2_preg <= ap_const_lv32_0;
            else
                if (((tmp_4_reg_267 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    idataOutCtrl_2_preg <= tmp_1_fu_249_p2;
                end if; 
            end if;
        end if;
    end process;


    idataOutCtrl_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                idataOutCtrl_3_preg <= ap_const_lv32_0;
            else
                if (((tmp_4_reg_267 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    idataOutCtrl_3_preg <= tmp_1_fu_249_p2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_186 <= i_1_reg_262;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_186 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_262 <= i_1_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_206_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_3_reg_272 <= tmp_3_fu_222_p6;
                tmp_4_reg_267 <= tmp_4_fu_218_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_206_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_206_p2)
    begin
        if (((exitcond_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_206_p2)
    begin
        if (((exitcond_fu_206_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_206_p2 <= "1" when (i_reg_186 = ap_const_lv3_4) else "0";

    fdataOutCtrl_0_assign_proc : process(tmp_4_reg_267, ap_CS_fsm_state6, grp_fu_197_p2, fdataOutCtrl_0_preg)
    begin
        if (((tmp_4_reg_267 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fdataOutCtrl_0 <= grp_fu_197_p2;
        else 
            fdataOutCtrl_0 <= fdataOutCtrl_0_preg;
        end if; 
    end process;


    fdataOutCtrl_1_assign_proc : process(tmp_4_reg_267, ap_CS_fsm_state6, grp_fu_197_p2, fdataOutCtrl_1_preg)
    begin
        if (((tmp_4_reg_267 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fdataOutCtrl_1 <= grp_fu_197_p2;
        else 
            fdataOutCtrl_1 <= fdataOutCtrl_1_preg;
        end if; 
    end process;


    fdataOutCtrl_2_assign_proc : process(tmp_4_reg_267, ap_CS_fsm_state6, grp_fu_197_p2, fdataOutCtrl_2_preg)
    begin
        if (((tmp_4_reg_267 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fdataOutCtrl_2 <= grp_fu_197_p2;
        else 
            fdataOutCtrl_2 <= fdataOutCtrl_2_preg;
        end if; 
    end process;


    fdataOutCtrl_3_assign_proc : process(tmp_4_reg_267, ap_CS_fsm_state6, grp_fu_197_p2, fdataOutCtrl_3_preg)
    begin
        if (((tmp_4_reg_267 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            fdataOutCtrl_3 <= grp_fu_197_p2;
        else 
            fdataOutCtrl_3 <= fdataOutCtrl_3_preg;
        end if; 
    end process;

    i_1_fu_212_p2 <= std_logic_vector(unsigned(i_reg_186) + unsigned(ap_const_lv3_1));

    idataOutCtrl_0_assign_proc : process(tmp_4_reg_267, ap_CS_fsm_state6, tmp_1_fu_249_p2, idataOutCtrl_0_preg)
    begin
        if (((tmp_4_reg_267 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            idataOutCtrl_0 <= tmp_1_fu_249_p2;
        else 
            idataOutCtrl_0 <= idataOutCtrl_0_preg;
        end if; 
    end process;


    idataOutCtrl_1_assign_proc : process(tmp_4_reg_267, ap_CS_fsm_state6, tmp_1_fu_249_p2, idataOutCtrl_1_preg)
    begin
        if (((tmp_4_reg_267 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            idataOutCtrl_1 <= tmp_1_fu_249_p2;
        else 
            idataOutCtrl_1 <= idataOutCtrl_1_preg;
        end if; 
    end process;


    idataOutCtrl_2_assign_proc : process(tmp_4_reg_267, ap_CS_fsm_state6, tmp_1_fu_249_p2, idataOutCtrl_2_preg)
    begin
        if (((tmp_4_reg_267 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            idataOutCtrl_2 <= tmp_1_fu_249_p2;
        else 
            idataOutCtrl_2 <= idataOutCtrl_2_preg;
        end if; 
    end process;


    idataOutCtrl_3_assign_proc : process(tmp_4_reg_267, ap_CS_fsm_state6, tmp_1_fu_249_p2, idataOutCtrl_3_preg)
    begin
        if (((tmp_4_reg_267 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            idataOutCtrl_3 <= tmp_1_fu_249_p2;
        else 
            idataOutCtrl_3 <= idataOutCtrl_3_preg;
        end if; 
    end process;

    tmp_1_fu_249_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) + unsigned(tmp_fu_236_p6));
    tmp_3_fu_222_p5 <= i_reg_186(2 - 1 downto 0);
    tmp_4_fu_218_p1 <= i_reg_186(2 - 1 downto 0);
end behav;
